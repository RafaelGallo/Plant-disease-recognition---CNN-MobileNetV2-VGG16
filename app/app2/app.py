import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
import tempfile
from PIL import Image
from huggingface_hub import hf_hub_download

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Classificador de Doen√ßas em Folhas", layout="wide")
st.title("üåø Classificador de Doen√ßas em Folhas com MobileNetV2")

# Carrega modelo da Hugging Face
@st.cache_resource
def load_model():
    model_path = hf_hub_download(
        repo_id="Gallorafael2222/plantdiseasecnn",
        filename="models/MobileNetV2_model.h5",
        repo_type="model"
    )
    return tf.keras.models.load_model(model_path)

model = load_model()
class_names = ['Healthy', 'Powdery', 'Rust']

# Preprocessamento da imagem
def preprocess_image(img, target_size=(224, 224)):
    img = img.resize(target_size)
    img_array = np.array(img)
    if img_array.shape[-1] == 4:
        img_array = img_array[..., :3]
    img_array = img_array / 255.0
    return np.expand_dims(img_array, axis=0)

# Verifica√ß√£o de folha v√°lida
def is_valid_leaf(prediction, threshold=0.70):
    return np.max(prediction) >= threshold

# Tabs de navega√ß√£o
tab1, tab2, tab3 = st.tabs(["üì∏ Classificador", "üìä M√©tricas dos Modelos", "üß† Sobre os Modelos CNN"])

# ===============================
# üì∏ Aba 1 - Classificador
# ===============================
with tab1:
    st.subheader("üì∑ Envie uma imagem de uma folha")

    option = st.radio("Modo de envio:", ["Upload de imagem", "Usar c√¢mera"])
    uploaded_file = st.file_uploader("üì§ Upload", type=["jpg", "jpeg", "png"]) if option == "Upload de imagem" else st.camera_input("üì∏ C√¢mera")

    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        st.image(image, caption="üñºÔ∏è Imagem carregada", use_container_width=True)

        processed_img = preprocess_image(image)
        prediction = model.predict(processed_img)[0]

        if is_valid_leaf(prediction):
            predicted_class = class_names[np.argmax(prediction)]
            confidence = np.max(prediction)

            st.markdown(f"### üß† Previs√£o: `{predicted_class}`")
            st.success(f"üìä Confiabilidade: `{confidence:.2%}`")

            st.subheader("üìå Detalhes da previs√£o por classe:")
            for i, class_name in enumerate(class_names):
                st.write(f"- {class_name}: `{prediction[i]:.2%}`")

            # OpenCV: Desenhar caixa + texto
            temp_file = tempfile.NamedTemporaryFile(delete=False)
            temp_file.write(uploaded_file.read())
            temp_file.flush()

            cv_img = cv2.imread(temp_file.name)
            cv_img = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
            (h, w) = cv_img.shape[:2]
            start_x, start_y = int(w * 0.2), int(h * 0.2)
            end_x, end_y = int(w * 0.8), int(h * 0.8)

            colors = {'Rust': (255, 0, 0), 'Healthy': (0, 255, 0), 'Powdery': (255, 165, 0)}
            color = colors.get(predicted_class, (0, 0, 0))

            cv2.rectangle(cv_img, (start_x, start_y), (end_x, end_y), color, 3)
            cv2.putText(cv_img, predicted_class, (start_x, start_y - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.0, color, 2)

            st.image(cv_img, caption="üñºÔ∏è Detec√ß√£o com OpenCV", use_container_width=True)

            # Seaborn: gr√°fico de barras
            st.markdown("### üìä Distribui√ß√£o de Confian√ßa")
            fig, ax = plt.subplots()
            sns.barplot(x=class_names, y=prediction, palette=['green', 'orange', 'red'], ax=ax)
            ax.set_ylim(0, 1)
            ax.set_ylabel("Probabilidade")
            ax.set_title("Confian√ßa por Classe")
            for i, v in enumerate(prediction):
                ax.text(i, v + 0.01, f"{v:.2%}", ha='center', fontsize=10)
            st.pyplot(fig)

        else:
            st.error("‚ùå A imagem enviada n√£o parece conter uma folha. Tente novamente com outra imagem.")

# ===============================
# üìä Aba 2 - M√©tricas dos Modelos
# ===============================
with tab2:
    st.subheader("üìà Acur√°cia dos Modelos CNN Testados")

    data = {
        "Modelo": ["DenseNet121", "InceptionV3", "MobileNetV2", "VGG16", "ResNet50", "EfficientNetB0"],
        "Acur√°cia Valida√ß√£o": [0.983, 1.0, 0.967, 0.917, 0.617, 0.333],
        "Acur√°cia Treino": [0.978, 0.948, 0.975, 0.907, 0.454, 0.321]
    }
    df = pd.DataFrame(data)

    st.dataframe(df, use_container_width=True)

    fig, ax = plt.subplots(figsize=(10, 4))
    bar_width = 0.35
    index = np.arange(len(df))

    ax.bar(index, df["Acur√°cia Valida√ß√£o"], bar_width, label='Valida√ß√£o', color='skyblue')
    ax.bar(index + bar_width, df["Acur√°cia Treino"], bar_width, label='Treino', color='lightgreen')

    ax.set_xlabel('Modelos')
    ax.set_ylabel('Acur√°cia')
    ax.set_title('Compara√ß√£o de Acur√°cia - Treino vs Valida√ß√£o')
    ax.set_xticks(index + bar_width / 2)
    ax.set_xticklabels(df["Modelo"], rotation=45)
    ax.legend()
    st.pyplot(fig)

# ===============================
# üß† Aba 3 - Sobre os Modelos CNN
# ===============================
with tab3:
    st.subheader("üß† O que s√£o os modelos CNN utilizados?")
    st.markdown("""
As **Redes Neurais Convolucionais (CNNs)** s√£o altamente eficazes para o reconhecimento de padr√µes visuais.

### Modelos utilizados:

- **MobileNetV2**: Leve, r√°pido, ideal para dispositivos m√≥veis.
- **DenseNet121**: Conex√µes densas entre camadas. Melhora o fluxo de gradientes.
- **InceptionV3**: V√°rios filtros em paralelo. Captura padr√µes multi-escala.
- **VGG16**: Simples, camadas 3x3 empilhadas. Boa base para transfer learning.
- **ResNet50**: Introduz conex√µes residuais (atalhos). Resolve gradiente desaparecendo.
- **EfficientNetB0**: Otimiza profundidade, largura e resolu√ß√£o. Muito eficiente.

Todos foram treinados para classificar folhas em: `Healthy`, `Powdery` e `Rust`.
""")
